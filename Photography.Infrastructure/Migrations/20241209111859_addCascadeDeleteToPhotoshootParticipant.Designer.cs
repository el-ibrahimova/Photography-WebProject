// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Photography.Infrastructure.Data;

#nullable disable

namespace Photography.Infrastructure.Migrations
{
    [DbContext(typeof(PhotographyDbContext))]
    [Migration("20241209111859_addCascadeDeleteToPhotoshootParticipant")]
    partial class addCascadeDeleteToPhotoshootParticipant
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8246f96f-bd49-4db2-69ae-08dd176d0f38"),
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("34282161-754b-4c2a-2ec6-08dd12303248"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("95d458a7-115a-4db5-9319-809c7763d841"),
                            RoleId = new Guid("8246f96f-bd49-4db2-69ae-08dd176d0f38")
                        },
                        new
                        {
                            UserId = new Guid("58d5d0e4-2bd2-477d-b94c-ff91ec025846"),
                            RoleId = new Guid("8246f96f-bd49-4db2-69ae-08dd176d0f38")
                        },
                        new
                        {
                            UserId = new Guid("33386302-4eb2-4a2b-925c-819c1b92cc4d"),
                            RoleId = new Guid("8246f96f-bd49-4db2-69ae-08dd176d0f38")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Photography.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("User First Name");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Is user deleted");

                    b.Property<DateTime>("JoinedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 12, 9, 13, 18, 56, 786, DateTimeKind.Local).AddTicks(6118))
                        .HasComment("Date of user registration");

                    b.Property<string>("LastName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("User Last Name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("58d5d0e4-2bd2-477d-b94c-ff91ec025846"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ff5eceef-470e-46cf-be40-37f30f2719d3",
                            Email = "client_one@gmail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            JoinedAt = new DateTime(2024, 12, 9, 13, 18, 56, 786, DateTimeKind.Local).AddTicks(8539),
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT_ONE@GMAIL.COM",
                            NormalizedUserName = "CLIENTONE",
                            PasswordHash = "AQAAAAIAAYagAAAAEBfb5zBrgKYYyTIkgxuWGCpriPwiEMnQOviouEuzcJIJWQDhZOFKwgqxquWC9y8xrg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "be9a148f-7d2a-45d7-86cc-87f0b4eeb965",
                            TwoFactorEnabled = false,
                            UserName = "ClientOne"
                        },
                        new
                        {
                            Id = new Guid("33386302-4eb2-4a2b-925c-819c1b92cc4d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4c4ce12a-b7bb-41dd-b4e6-66b68de9fe10",
                            Email = "client_two@gmail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            JoinedAt = new DateTime(2024, 12, 9, 13, 18, 56, 786, DateTimeKind.Local).AddTicks(8563),
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT_TWO@GMAIL.COM",
                            NormalizedUserName = "CLIENTTWO",
                            PasswordHash = "AQAAAAIAAYagAAAAELd+5gSzbEEzDPbjT6fTEzjdiv6Bt8WBQL0+viHOsPMKstkZGUAGyPL2AAdypqFQhg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5fd1bc73-a3e0-49da-8f36-2de2b0af96c9",
                            TwoFactorEnabled = false,
                            UserName = "ClientTwo"
                        },
                        new
                        {
                            Id = new Guid("0cea6e1c-0655-4c21-a14b-5b5932332ffd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3e1e6c08-614d-4fd7-a4a7-e7bd8dbc8e7e",
                            Email = "admin@photography.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            JoinedAt = new DateTime(2024, 12, 9, 13, 18, 56, 786, DateTimeKind.Local).AddTicks(8585),
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@PHOTOGRAPHY.COM",
                            NormalizedUserName = "АDMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHX7aiedf1Y2WdaPPavNYpkpwc83jk95g3bnEvXtH7x9ldNtM5XVOHXx+iODwjy72w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3e32212a-f415-4db3-bff5-c25f4e8d9cff",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("95d458a7-115a-4db5-9319-809c7763d841"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dca1b0c7-0879-445f-b662-7d7f9b67d618",
                            Email = "photographer@gmail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            JoinedAt = new DateTime(2024, 12, 9, 13, 18, 56, 786, DateTimeKind.Local).AddTicks(8606),
                            LockoutEnabled = false,
                            NormalizedEmail = "PHOTOGRAPHER@GMAIL.COM",
                            NormalizedUserName = "PHOTOGRAPHER",
                            PasswordHash = "AQAAAAIAAYagAAAAEIFGrkUhgg7kZgRkLxXI+sT5i+EOFS4O4C542CFzwiRrnrWzhu4vtmknIPHTLGZ4Xw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ab86ce2-88f8-4c11-a756-d7ce7198c7ca",
                            TwoFactorEnabled = false,
                            UserName = "Photographer"
                        });
                });

            modelBuilder.Entity("Photography.Infrastructure.Data.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Category identifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Is category deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Name of the category");

                    b.HasKey("Id");

                    b.ToTable("Categories", t =>
                        {
                            t.HasComment("Categories of photos");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("5d56e870-0080-4609-b189-94282ae97f31"),
                            IsDeleted = false,
                            Name = "Животни"
                        },
                        new
                        {
                            Id = new Guid("e5fd2c2f-40a0-4a90-a89c-81ab099fa581"),
                            IsDeleted = false,
                            Name = "Природа"
                        },
                        new
                        {
                            Id = new Guid("bcc254e8-2534-4791-90e2-d17c03122886"),
                            IsDeleted = false,
                            Name = "Храна и напитки"
                        },
                        new
                        {
                            Id = new Guid("aa25251b-6ddc-438b-b5f0-28b3341731e3"),
                            IsDeleted = false,
                            Name = "Семейна фотография"
                        },
                        new
                        {
                            Id = new Guid("8e1654cf-f730-41c7-92c2-0e280a94e7ce"),
                            IsDeleted = false,
                            Name = "Спорт"
                        },
                        new
                        {
                            Id = new Guid("13a08262-6477-40f9-8db7-d6ebd4178e47"),
                            IsDeleted = false,
                            Name = "Архитектура"
                        },
                        new
                        {
                            Id = new Guid("e5aedd38-0dc5-49e4-b51a-acf63fd991a8"),
                            IsDeleted = false,
                            Name = "Пътуваня и дестинации"
                        },
                        new
                        {
                            Id = new Guid("c7347c35-effb-4cd6-9334-1348ec5d635b"),
                            IsDeleted = false,
                            Name = "Черно-бяла фотография"
                        },
                        new
                        {
                            Id = new Guid("c7e699d1-fc73-459b-8f0f-11b7c4e101b5"),
                            IsDeleted = false,
                            Name = "Мода"
                        },
                        new
                        {
                            Id = new Guid("c1f05508-2b56-46d8-86f9-027f5aaee67a"),
                            IsDeleted = false,
                            Name = "Пейзажи"
                        },
                        new
                        {
                            Id = new Guid("a5b3d93c-96d1-41ab-8d07-4cbf7754656f"),
                            IsDeleted = false,
                            Name = "Други"
                        });
                });

            modelBuilder.Entity("Photography.Infrastructure.Data.Models.FavoritePhoto", b =>
                {
                    b.Property<Guid>("PhotoId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Photo identifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("User identifier");

                    b.HasKey("PhotoId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoritePhotos", t =>
                        {
                            t.HasComment("Favorite photo");
                        });
                });

            modelBuilder.Entity("Photography.Infrastructure.Data.Models.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Photo identifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasComment("Date of photo uploading");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Description of the photo");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Photo URL");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Is the photo deleted or not");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit")
                        .HasComment("Is the photo private ot public");

                    b.Property<Guid?>("PhotographerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Photographer");

                    b.Property<int>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("Rating of the photo");

                    b.Property<string>("TagUser")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Tag user");

                    b.Property<DateTime>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 12, 9, 13, 18, 57, 273, DateTimeKind.Local).AddTicks(3034))
                        .HasComment("Date of photo uploading");

                    b.Property<Guid?>("UserOwnerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Owner of photo");

                    b.HasKey("Id");

                    b.HasIndex("PhotographerId");

                    b.HasIndex("UserOwnerId");

                    b.ToTable("Photos", t =>
                        {
                            t.HasComment("Photo information");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2f36f3c-44f2-433c-bc88-bda0af4a5b5c"),
                            Description = "Розите са цветя, които говорят на сърцето, без да използват думи",
                            ImageUrl = "https://live.staticflickr.com/65535/54179261839_b223eaf533_n.jpg",
                            IsDeleted = false,
                            IsPrivate = false,
                            PhotographerId = new Guid("d19b7253-a40e-4d28-8bd0-43410f6a3ca4"),
                            Rating = 0,
                            TagUser = "Ниса",
                            UploadedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1d86b8c1-424a-464b-8582-edc8d1287125"),
                            Description = "Началото на нов живот",
                            ImageUrl = "https://live.staticflickr.com/65535/54179405645_da2965d7af_n.jpg",
                            IsDeleted = false,
                            IsPrivate = false,
                            PhotographerId = new Guid("d19b7253-a40e-4d28-8bd0-43410f6a3ca4"),
                            Rating = 0,
                            UploadedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2a4c4f88-6949-4b4a-bb4e-4227ec05a78e"),
                            Description = "Книгите са вълшебни врати, през които можем да се пренесем в различни светове и реалности - Джим Хенсън",
                            ImageUrl = "https://live.staticflickr.com/65535/54179235863_ef79e9cd79.jpg",
                            IsDeleted = false,
                            IsPrivate = false,
                            PhotographerId = new Guid("d19b7253-a40e-4d28-8bd0-43410f6a3ca4"),
                            Rating = 0,
                            UploadedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("45bc9358-d7ec-41f8-9ea9-511e81306730"),
                            Description = "The Tree",
                            ImageUrl = "https://live.staticflickr.com/65535/54179405720_de0340c35d_n.jpg",
                            IsDeleted = false,
                            IsPrivate = false,
                            PhotographerId = new Guid("d19b7253-a40e-4d28-8bd0-43410f6a3ca4"),
                            Rating = 0,
                            UploadedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d8679b22-5cc2-4d0d-95e1-4f535dbdc56a"),
                            Description = "Благодат",
                            ImageUrl = "https://live.staticflickr.com/65535/54179261934_74b915c632_n.jpg",
                            IsDeleted = false,
                            IsPrivate = false,
                            PhotographerId = new Guid("d19b7253-a40e-4d28-8bd0-43410f6a3ca4"),
                            Rating = 0,
                            TagUser = "Ниса",
                            UploadedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1932884a-dfdc-4acb-9334-ac88c1585170"),
                            ImageUrl = "https://live.staticflickr.com/65535/54179235838_98b592402f_n.jpg",
                            IsDeleted = false,
                            IsPrivate = false,
                            PhotographerId = new Guid("d19b7253-a40e-4d28-8bd0-43410f6a3ca4"),
                            Rating = 0,
                            UploadedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2c9fbf60-4155-4777-a03f-3e7d5f01339b"),
                            ImageUrl = "https://live.staticflickr.com/65535/54178078662_c668a923ac_n.jpg",
                            IsDeleted = false,
                            IsPrivate = false,
                            PhotographerId = new Guid("d19b7253-a40e-4d28-8bd0-43410f6a3ca4"),
                            Rating = 0,
                            UploadedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("cf01d099-9925-490d-b1b7-ef30e24167bb"),
                            ImageUrl = "https://live.staticflickr.com/65535/54179405980_f9fb480fb0_n.jpg",
                            IsDeleted = false,
                            IsPrivate = false,
                            PhotographerId = new Guid("d19b7253-a40e-4d28-8bd0-43410f6a3ca4"),
                            Rating = 0,
                            UploadedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("938b99b9-25ff-4a6a-89b5-e9d625ab72b4"),
                            Description = "Home, sweet home",
                            ImageUrl = "https://live.staticflickr.com/65535/54178963106_6698d8a47b_n.jpg",
                            IsDeleted = false,
                            IsPrivate = true,
                            PhotographerId = new Guid("d19b7253-a40e-4d28-8bd0-43410f6a3ca4"),
                            Rating = 0,
                            TagUser = "Елмаз",
                            UploadedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserOwnerId = new Guid("33386302-4eb2-4a2b-925c-819c1b92cc4d")
                        },
                        new
                        {
                            Id = new Guid("8a009518-bb4a-4443-9e75-da259a75430a"),
                            ImageUrl = "https://live.staticflickr.com/65535/54178078787_53fe24ea4a_n.jpg",
                            IsDeleted = false,
                            IsPrivate = false,
                            PhotographerId = new Guid("d19b7253-a40e-4d28-8bd0-43410f6a3ca4"),
                            Rating = 0,
                            UploadedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("fba07170-9485-423b-93dd-6c9fc392fc71"),
                            Description = "River road",
                            ImageUrl = "https://live.staticflickr.com/65535/54179262259_781ec3326b_n.jpg",
                            IsDeleted = false,
                            IsPrivate = true,
                            PhotographerId = new Guid("d19b7253-a40e-4d28-8bd0-43410f6a3ca4"),
                            Rating = 0,
                            UploadedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserOwnerId = new Guid("58d5d0e4-2bd2-477d-b94c-ff91ec025846")
                        },
                        new
                        {
                            Id = new Guid("f06e0640-1421-4303-87c3-8a9d6d815f38"),
                            ImageUrl = "https://live.staticflickr.com/65535/54179262309_60ce92ee0b_n.jpg",
                            IsDeleted = false,
                            IsPrivate = true,
                            PhotographerId = new Guid("d19b7253-a40e-4d28-8bd0-43410f6a3ca4"),
                            Rating = 0,
                            TagUser = "Микаел",
                            UploadedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserOwnerId = new Guid("58d5d0e4-2bd2-477d-b94c-ff91ec025846")
                        },
                        new
                        {
                            Id = new Guid("1d2c011f-8eba-452a-a180-67349167774f"),
                            Description = "Long way home",
                            ImageUrl = "https://live.staticflickr.com/65535/54179236228_d084cd37fb_n.jpg",
                            IsDeleted = false,
                            IsPrivate = true,
                            PhotographerId = new Guid("d19b7253-a40e-4d28-8bd0-43410f6a3ca4"),
                            Rating = 0,
                            TagUser = "Микаел",
                            UploadedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserOwnerId = new Guid("58d5d0e4-2bd2-477d-b94c-ff91ec025846")
                        },
                        new
                        {
                            Id = new Guid("92d706d4-5969-412b-a663-463c71865623"),
                            ImageUrl = "https://live.staticflickr.com/65535/54191040230_19726ab96d_w.jpg",
                            IsDeleted = false,
                            IsPrivate = true,
                            PhotographerId = new Guid("d19b7253-a40e-4d28-8bd0-43410f6a3ca4"),
                            Rating = 0,
                            UploadedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserOwnerId = new Guid("95d458a7-115a-4db5-9319-809c7763d841")
                        },
                        new
                        {
                            Id = new Guid("451bff33-d4fc-4217-bdda-a67251b1a427"),
                            Description = "Girlish",
                            ImageUrl = "https://live.staticflickr.com/65535/54190853033_3552742834_w.jpg",
                            IsDeleted = false,
                            IsPrivate = true,
                            PhotographerId = new Guid("d19b7253-a40e-4d28-8bd0-43410f6a3ca4"),
                            Rating = 0,
                            UploadedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserOwnerId = new Guid("58d5d0e4-2bd2-477d-b94c-ff91ec025846")
                        },
                        new
                        {
                            Id = new Guid("af7ef5d0-c362-43f7-8418-5c20ff360141"),
                            Description = "Всяко нещо крие своята красота",
                            ImageUrl = "https://live.staticflickr.com/65535/54191040245_7864be5ce1_w.jpg",
                            IsDeleted = false,
                            IsPrivate = false,
                            PhotographerId = new Guid("d19b7253-a40e-4d28-8bd0-43410f6a3ca4"),
                            Rating = 0,
                            UploadedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8787347e-dc88-411d-9acd-fdd5937197ad"),
                            ImageUrl = "https://live.staticflickr.com/65535/54189701457_55e2a97488_w.jpg",
                            IsDeleted = false,
                            IsPrivate = true,
                            PhotographerId = new Guid("d19b7253-a40e-4d28-8bd0-43410f6a3ca4"),
                            Rating = 0,
                            TagUser = "Мери",
                            UploadedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserOwnerId = new Guid("58d5d0e4-2bd2-477d-b94c-ff91ec025846")
                        },
                        new
                        {
                            Id = new Guid("b597a498-68d9-4883-b081-9f53d2237c2b"),
                            Description = "Времето се променя и ние с него",
                            ImageUrl = "https://live.staticflickr.com/65535/54189701467_958b69d5bc_w.jpg",
                            IsDeleted = false,
                            IsPrivate = false,
                            PhotographerId = new Guid("d19b7253-a40e-4d28-8bd0-43410f6a3ca4"),
                            Rating = 0,
                            UploadedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Photography.Infrastructure.Data.Models.PhotoCategory", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Category identifier");

                    b.Property<Guid>("PhotoId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Photo identifier");

                    b.HasKey("CategoryId", "PhotoId");

                    b.HasIndex("PhotoId");

                    b.ToTable("PhotosCategories", t =>
                        {
                            t.HasComment("Photo Categories");
                        });

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("a5b3d93c-96d1-41ab-8d07-4cbf7754656f"),
                            PhotoId = new Guid("f2f36f3c-44f2-433c-bc88-bda0af4a5b5c")
                        },
                        new
                        {
                            CategoryId = new Guid("e5fd2c2f-40a0-4a90-a89c-81ab099fa581"),
                            PhotoId = new Guid("1d86b8c1-424a-464b-8582-edc8d1287125")
                        },
                        new
                        {
                            CategoryId = new Guid("e5fd2c2f-40a0-4a90-a89c-81ab099fa581"),
                            PhotoId = new Guid("45bc9358-d7ec-41f8-9ea9-511e81306730")
                        },
                        new
                        {
                            CategoryId = new Guid("c1f05508-2b56-46d8-86f9-027f5aaee67a"),
                            PhotoId = new Guid("45bc9358-d7ec-41f8-9ea9-511e81306730")
                        },
                        new
                        {
                            CategoryId = new Guid("e5fd2c2f-40a0-4a90-a89c-81ab099fa581"),
                            PhotoId = new Guid("d8679b22-5cc2-4d0d-95e1-4f535dbdc56a")
                        },
                        new
                        {
                            CategoryId = new Guid("e5fd2c2f-40a0-4a90-a89c-81ab099fa581"),
                            PhotoId = new Guid("1932884a-dfdc-4acb-9334-ac88c1585170")
                        },
                        new
                        {
                            CategoryId = new Guid("5d56e870-0080-4609-b189-94282ae97f31"),
                            PhotoId = new Guid("1932884a-dfdc-4acb-9334-ac88c1585170")
                        },
                        new
                        {
                            CategoryId = new Guid("e5fd2c2f-40a0-4a90-a89c-81ab099fa581"),
                            PhotoId = new Guid("2c9fbf60-4155-4777-a03f-3e7d5f01339b")
                        },
                        new
                        {
                            CategoryId = new Guid("e5fd2c2f-40a0-4a90-a89c-81ab099fa581"),
                            PhotoId = new Guid("938b99b9-25ff-4a6a-89b5-e9d625ab72b4")
                        },
                        new
                        {
                            CategoryId = new Guid("aa25251b-6ddc-438b-b5f0-28b3341731e3"),
                            PhotoId = new Guid("938b99b9-25ff-4a6a-89b5-e9d625ab72b4")
                        },
                        new
                        {
                            CategoryId = new Guid("e5fd2c2f-40a0-4a90-a89c-81ab099fa581"),
                            PhotoId = new Guid("8a009518-bb4a-4443-9e75-da259a75430a")
                        },
                        new
                        {
                            CategoryId = new Guid("e5fd2c2f-40a0-4a90-a89c-81ab099fa581"),
                            PhotoId = new Guid("fba07170-9485-423b-93dd-6c9fc392fc71")
                        },
                        new
                        {
                            CategoryId = new Guid("aa25251b-6ddc-438b-b5f0-28b3341731e3"),
                            PhotoId = new Guid("f06e0640-1421-4303-87c3-8a9d6d815f38")
                        },
                        new
                        {
                            CategoryId = new Guid("e5fd2c2f-40a0-4a90-a89c-81ab099fa581"),
                            PhotoId = new Guid("f06e0640-1421-4303-87c3-8a9d6d815f38")
                        },
                        new
                        {
                            CategoryId = new Guid("c7e699d1-fc73-459b-8f0f-11b7c4e101b5"),
                            PhotoId = new Guid("451bff33-d4fc-4217-bdda-a67251b1a427")
                        },
                        new
                        {
                            CategoryId = new Guid("e5aedd38-0dc5-49e4-b51a-acf63fd991a8"),
                            PhotoId = new Guid("451bff33-d4fc-4217-bdda-a67251b1a427")
                        },
                        new
                        {
                            CategoryId = new Guid("e5aedd38-0dc5-49e4-b51a-acf63fd991a8"),
                            PhotoId = new Guid("af7ef5d0-c362-43f7-8418-5c20ff360141")
                        },
                        new
                        {
                            CategoryId = new Guid("c7e699d1-fc73-459b-8f0f-11b7c4e101b5"),
                            PhotoId = new Guid("8787347e-dc88-411d-9acd-fdd5937197ad")
                        },
                        new
                        {
                            CategoryId = new Guid("13a08262-6477-40f9-8db7-d6ebd4178e47"),
                            PhotoId = new Guid("b597a498-68d9-4883-b081-9f53d2237c2b")
                        });
                });

            modelBuilder.Entity("Photography.Infrastructure.Data.Models.PhotoRating", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("User identifier");

                    b.Property<Guid>("PhotoId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Photo identifier");

                    b.HasKey("UserId", "PhotoId");

                    b.HasIndex("PhotoId");

                    b.ToTable("PhotosRatings", t =>
                        {
                            t.HasComment("Rating for photo");
                        });
                });

            modelBuilder.Entity("Photography.Infrastructure.Data.Models.PhotoShoot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PhotoShoot identifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 12, 9, 13, 18, 57, 276, DateTimeKind.Local).AddTicks(9258))
                        .HasComment("Date of PhotoShoot creation");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Photo shoot description");

                    b.Property<string>("ImageUrl1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Image URL for first photo");

                    b.Property<string>("ImageUrl2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Image URL for second photo");

                    b.Property<string>("ImageUrl3")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Image URL for third photo");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Is photo shoot deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("PhotoShoot Name");

                    b.Property<Guid>("PhotographerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PhotoShoot photographer identifier");

                    b.HasKey("Id");

                    b.HasIndex("PhotographerId");

                    b.ToTable("PhotoShoots", t =>
                        {
                            t.HasComment("PhotoShoot");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("29858981-86ee-4ab7-b569-9f1e88141421"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Потопи се в свят на свежи цветове, изпълнен с радост и уют! Декорът с балони и маргаритки е перфектен избор за всяко събитие, носещо усмивки и пролетно настроение.\n\n✨ Как изглежда декорът?\n\n🎈 Балони в нежни пастелни тонове или ярки цветове, подредени в елегантни арки, букети или гирлянди.\n🌼 Красиви маргаритки – естествени или декоративни, вплетени между балоните, създавайки хармонична и весела атмосфера.\n🌿 Малки зелени акценти за още повече природна свежест.\n🌟 Възможност за добавяне на персонализирани елементи – имена, надписи или специални фигури.\n💡 За какви събития е подходящ?\n\n🎂 Рождени дни и празненства с пролетна или лятна тематика.\n👶 Бебешки фотосесии или кръщенета.\n🥂 Романтични събития като годежи или сватбени фотосесии.\n📸 Тематични фотосесии на открито или в уютна студийна атмосфера.\n✨ Създай празник, изпълнен с нежност и красота!\nДекорът с балони и маргаритки ще добави неповторима топлина и стил към твоето събитие.",
                            ImageUrl1 = "https://live.staticflickr.com/65535/54190601336_b62502c21a_w.jpg",
                            ImageUrl2 = "https://live.staticflickr.com/65535/54189701927_c384ca435f_n.jpg",
                            IsDeleted = false,
                            Name = "Декор с балони и маргаритки – свежест и радост в едно!",
                            PhotographerId = new Guid("d19b7253-a40e-4d28-8bd0-43410f6a3ca4")
                        },
                        new
                        {
                            Id = new Guid("2a15bddc-1dba-457c-b501-ecadd60f2ba7"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Потопи се в приказна атмосфера, изпълнена с ефирна нежност и радост! Декорът с балони и облаци е перфектният избор за създаване на незабравима фотосесия, парти или специално събитие.\n\n✨ Как изглежда декорът?\n\n🌥️ Нежни пухкави облаци, които създават усещане за лекота и безгрижие.\n🎈 Балони в пастелни или ярки цветове, красиво подредени в арки, букети или плаващи композиции.\n✨ Блясък и акценти – включваме светлинки или блестящи детайли за още повече магия.\n🌟 Персонализирани елементи – добавяме надписи, цифри или малки декорации, съобразени с темата на събитието.\n💡 За кого е подходящ този декор?\n\n👶 Бебешки фотосесии и рождени дни.\n💍 Романтични моменти като предложения за брак или годежи.\n🎉 Детски партита и тематични събития.\n📸 Уникални фотосесии за всеки, който иска да се почувства като в облаците.\nСъздай магия, която ще остави незабравими спомени! ✨\nПозволи на мечтите си да полетят с нашия декор от балони и облаци.",
                            ImageUrl1 = "https://live.staticflickr.com/65535/54190601381_ee8cc95269_w.jpg",
                            ImageUrl2 = "https://live.staticflickr.com/65535/54190601406_faae4a7942_w.jpg",
                            IsDeleted = false,
                            Name = "Декор с балони и облаци – магията на мечтите!",
                            PhotographerId = new Guid("d19b7253-a40e-4d28-8bd0-43410f6a3ca4")
                        },
                        new
                        {
                            Id = new Guid("0f71803c-c0db-4cb2-8c7e-a3a38679a176"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Създай атмосфера, която впечатлява с минимализъм и съвършена хармония! Едноцветният декор е перфектният избор за всеки, който търси изтънченост и стил в детайлите.   Подходящ за всякакви събития:\n\n🎂 Рождени дни със стилна концепция.\n🥂 Романтични вечери, предложения за брак или годежи.\n📸 Професионални фотосесии, фокусирани върху елегантност и симетрия.\n🎉 Корпоративни събития с изискана атмосфера.\n✨ Защо да избереш едноцветен декор?\nЕдноцветната концепция носи усещане за изисканост и баланс, позволявайки на детайлите и емоциите да изпъкнат. 🎈 Направи събитието си незабравимо с простота, която говори сама за себе си!",
                            ImageUrl1 = "https://live.staticflickr.com/65535/54190601391_f3b0a45080_w.jpg",
                            ImageUrl2 = "https://live.staticflickr.com/65535/54190876344_a028421411_n.jpg",
                            ImageUrl3 = "https://live.staticflickr.com/65535/54190853588_78ffec8957_n.jpg",
                            IsDeleted = false,
                            Name = "Едноцветен декор – стил, елегантност и изчистена визия!",
                            PhotographerId = new Guid("d19b7253-a40e-4d28-8bd0-43410f6a3ca4")
                        });
                });

            modelBuilder.Entity("Photography.Infrastructure.Data.Models.PhotoShootParticipant", b =>
                {
                    b.Property<Guid>("PhotoShootId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PhotoShoot identifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("User identifier");

                    b.HasKey("PhotoShootId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PhotoShootParticipants", t =>
                        {
                            t.HasComment("PhotoShoot Participant");
                        });
                });

            modelBuilder.Entity("Photography.Infrastructure.Data.Models.Photographer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Photographer identifier");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Brand name of the photographer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Photographer user identifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Photographers", t =>
                        {
                            t.HasComment("Photographer");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("d19b7253-a40e-4d28-8bd0-43410f6a3ca4"),
                            BrandName = "NIES",
                            UserId = new Guid("95d458a7-115a-4db5-9319-809c7763d841")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Photography.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Photography.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Photography.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Photography.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Photography.Infrastructure.Data.Models.FavoritePhoto", b =>
                {
                    b.HasOne("Photography.Infrastructure.Data.Models.Photo", "Photo")
                        .WithMany("FavoritePhotos")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Photography.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("FavoritePhotos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Photo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Photography.Infrastructure.Data.Models.Photo", b =>
                {
                    b.HasOne("Photography.Infrastructure.Data.Models.Photographer", "Photographer")
                        .WithMany("Photos")
                        .HasForeignKey("PhotographerId");

                    b.HasOne("Photography.Infrastructure.Data.Models.ApplicationUser", "Owner")
                        .WithMany("Photos")
                        .HasForeignKey("UserOwnerId");

                    b.Navigation("Owner");

                    b.Navigation("Photographer");
                });

            modelBuilder.Entity("Photography.Infrastructure.Data.Models.PhotoCategory", b =>
                {
                    b.HasOne("Photography.Infrastructure.Data.Models.Category", "Category")
                        .WithMany("PhotosCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Photography.Infrastructure.Data.Models.Photo", "Photo")
                        .WithMany("PhotosCategories")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("Photography.Infrastructure.Data.Models.PhotoRating", b =>
                {
                    b.HasOne("Photography.Infrastructure.Data.Models.Photo", "Photo")
                        .WithMany("PhotosRatings")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Photography.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("PhotosRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Photo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Photography.Infrastructure.Data.Models.PhotoShoot", b =>
                {
                    b.HasOne("Photography.Infrastructure.Data.Models.Photographer", null)
                        .WithMany("PhotoShoots")
                        .HasForeignKey("PhotographerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Photography.Infrastructure.Data.Models.PhotoShootParticipant", b =>
                {
                    b.HasOne("Photography.Infrastructure.Data.Models.PhotoShoot", "PhotoShoot")
                        .WithMany("Participants")
                        .HasForeignKey("PhotoShootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Photography.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("Participants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PhotoShoot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Photography.Infrastructure.Data.Models.Photographer", b =>
                {
                    b.HasOne("Photography.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("Photographers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Photography.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("FavoritePhotos");

                    b.Navigation("Participants");

                    b.Navigation("Photographers");

                    b.Navigation("Photos");

                    b.Navigation("PhotosRatings");
                });

            modelBuilder.Entity("Photography.Infrastructure.Data.Models.Category", b =>
                {
                    b.Navigation("PhotosCategories");
                });

            modelBuilder.Entity("Photography.Infrastructure.Data.Models.Photo", b =>
                {
                    b.Navigation("FavoritePhotos");

                    b.Navigation("PhotosCategories");

                    b.Navigation("PhotosRatings");
                });

            modelBuilder.Entity("Photography.Infrastructure.Data.Models.PhotoShoot", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("Photography.Infrastructure.Data.Models.Photographer", b =>
                {
                    b.Navigation("PhotoShoots");

                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
